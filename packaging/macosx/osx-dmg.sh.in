#!/bin/bash
#
# USAGE
# osx-dmg [-s] -p /path/to/Wireshark.app
#
# The script creates a read-write disk image,
# copies Wireshark into it, customizes its appearance using a
# previously created .DS_Store file (wireshark.ds_store),
# and then compresses the disk image for distribution.
#
# Copied from Inkscape.
#
# AUTHORS
#	Jean-Olivier Irisson <jo.irisson@gmail.com>
#	Michael Wybrow <mjwybrow@users.sourceforge.net>
#
# Copyright (C) 2006-2007
# Released under GNU GPL, read the file 'COPYING' for more information
#
#
# How to update the disk image layout:
# ------------------------------------
#
# Modify the 'dmg_background.svg' file and generate a new
# 'dmg_background.png' file.
#
# Update the AppleScript file 'dmg_set_style.scpt'.
#
# Run this script with the '-s' option.  It will apply the
# 'dmg_set_style.scpt' AppleScript file, and then prompt the
# user to check the window size and position before writing
# a new 'wireshark.ds_store' file to work around a bug in Finder
# and AppleScript.  The updated 'wireshark.ds_store' will need
# to be commited to the repository when this is done.
#

# Set during configuration
version="@VERSION@"
if [ -z "$version" ] ; then
	echo "VERSION not set"
	exit 1
fi

# Defaults
app_bundle="Wireshark.app"
rw_name="RWwireshark $version.dmg"
volume_name="Wireshark $version"
src_dir="."
tmp_dir="/tmp/dmg-$$"

# Help message
#----------------------------------------------------------
help()
{
echo -e "
Create a custom dmg file to distribute Wireshark

USAGE
	$0 [-s] -p /path/to/Wireshark.app

OPTIONS
	-h,--help
		Display this help message.
	-b,--app-bundle
		Set the path to the Wireshark.app that should be copied
		in the dmg.
	-S,--source-directory
		If this is an out-of-tree build, set this to the path
		to the packaging/macosx source directory.

Icons are positioned and the background image is set in
arrange_dmg.applescript.
"
}

# Parse command line arguments
while [ "$1" != "" ]
do
	case $1 in
	  	-h|--help)
			help
			exit 0 ;;
	  	-b|--app-bundle)
			app_bundle="$2"
			shift 1 ;;
		-S|--source-directory)
			src_dir="$2"
			shift 1 ;;
		*)
			echo "Invalid command line option"
			exit 2 ;;
	esac
	shift 1
done

# Safety checks
if [ ! -e "$app_bundle" ]; then
	echo "Cannot find application bundle: $app_bundle"
	exit 1
fi

# Get the architecture
ws_bin="$app_bundle/Contents/MacOS/Wireshark"
case $( file "$ws_bin" ) in
	*Mach-O*64-bit*x86_64*)
		architecture="Intel 64"
		;;
	*Mach-O*i386*)
		architecture="Intel 32"
		;;
	*)
		echo "Cannot determine architecture of $ws_bin; file reports:"
		file "$ws_bin"
		exit 1
		;;
esac
pkg_title="$volume_name $architecture"

echo -e "\\nCREATE WIRESHARK DISK IMAGE\\n"
img_name="$pkg_title.dmg"

# Create temp directory with desired contents of the release volume.
rm -rf "$tmp_dir"
mkdir "$tmp_dir" || exit 1

echo -e "Copying files to temp directory"
# Copy the application bundle
cp -r "$app_bundle" "$tmp_dir"/ || exit 1
ln -sn "/Applications" "$tmp_dir"/

# Copy the readme
cp "../packaging/macosx/Read_me_first.html" "$tmp_dir/Read me first.html" || exit 1

# Copy the background image
mkdir "$tmp_dir/.assets" || exit 1
cp "$src_dir/dmg_background.png" "$tmp_dir/.assets/" || exit 1

# Create top-level package symlinks
ln -sn "$app_bundle/Contents/Resources/Extras/"*.pkg "$tmp_dir/"

# Create a new RW image from the temp directory.
echo -e "Creating a temporary disk image"
rm -f "$rw_name"
/usr/bin/hdiutil create -srcfolder "$tmp_dir" -volname "$volume_name" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW "$rw_name" || exit 1

# We're finished with the temp directory, remove it.
rm -rf "$tmp_dir"

# Mount the created image.
#MOUNT_DIR="/Volumes/$volume_name"
DEV_NAME=$( /usr/bin/hdiutil attach -readwrite -noverify -noautoopen "$rw_name" | grep -E '^/dev/' | sed 1q | awk '{print $1}' )

# Set icon positions and background image
# Work around 'Finder got an error: Canâ€™t get disk "Wireshark 3.1.1". (-1728)'
#sleep 5
#osascript ../packaging/macosx/arrange_dmg.applescript || exit 1

# Have the disk image window open automatically when mounted.
bless -openfolder "/Volumes/$volume_name"

# `hdiutil detach` sometimes fails with "Resource busy", possibly due to Spotlight.
# Give it a chance to finish up here and pass `-force` to hdiutil below.
sleep 5

# Unmount the disk image.
hdiutil detach "$DEV_NAME"

# Create the offical release image by compressing the RW one.
echo -e "Compressing the final disk image"

# TODO make this a command line option
if [ -e "$img_name" ]; then
	echo "$img_name already exists."
	rm -i "$img_name"
fi

# From the hdiutil man page:
# UDZO - UDIF zlib-compressed image
# ULFO - UDIF lzfse-compressed image (OS X 10.11+ only)
# UDBZ - UDIF bzip2-compressed image (Mac OS X 10.4+ only)

/usr/bin/hdiutil convert "$rw_name" -format UDBZ -o "$img_name" || exit 1
rm -f "$rw_name"

# TN2206, "Signing Disk Images"
if [ -n "$CODE_SIGN_IDENTITY" ] ; then
	echo -e "Signing $img_name"
	codesign \
		--sign "Developer ID Application: $CODE_SIGN_IDENTITY" \
		--timestamp \
		--verbose \
		"$img_name"
	spctl --assess --type open --context context:primary-signature --verbose=2 "$img_name" || exit 1
fi

exit 0
